plugins {
    id 'java-library'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

project.ext.name = "template"
project.ext.major = '1'
project.ext.minor = '0'
project.ext.fullVer = project.ext.major + '.' + project.ext.minor

group 'io.github.invvk'
version project.ext.fullVer

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://repo.aikar.co/content/groups/aikar/' }
    maven { url = 'https://repo.dmulloy2.net/repository/public/' }
    maven { url 'https://hub.spigotmc.org/nexus/content/repositories/public/' }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT'

    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    testImplementation 'org.mockito:mockito-core:4.5.1'
    testImplementation 'com.github.seeseemelk:MockBukkit-v1.13:0.2.0'
}

shadowJar {
    // set a destination directory if 'WORKING_BASE' property exists.
    if (project.hasProperty("WORKING_BASE")) {
        destinationDirectory = file(project.getProperties().get("WORKING_BASE"))
    }

    archiveBaseName.set(project.ext.name)
    archiveClassifier.set('')
    archiveVersion.set('')

    exclude 'META-INF/**'
    exclude 'LICENSE'
}

tasks.build.dependsOn(shadowJar)

test {
    useJUnitPlatform()
    testLogging {
        events "skipped", "failed"
    }
    ignoreFailures = false
}

def targetJavaVersion = 8
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version, name: project.ext.name]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
